# Standard pipeline to release go apps for Azure-AWS
# [Gitversion examples](https://github.com/GitTools/actions/tree/main/docs/examples/azure/gitversion)
# TODO: Modify pipeline to auto increment patch version using gitVersion & Keep release branching strategy. Write proper docs for the pipeline.
parameters:
- name: clean
  displayName: Checkout clean
  type: boolean
  default: false
  values:
  - false
  - true

trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
  paths:                    # docs are only for repository and can be ignored for this pipeline
    exclude:
      - readme.md

pool: K8S-AZURE-AWS

variables:
  - name: IsRelease
    value: $[contains(variables['Build.SourceBranch'], '/release/')]
  - name: GoVersion
    value: '1.23.3'
  - name: GoReleaserVersion
    value: 'v2.4.7'
  - name: GoBin
    value: '$(System.DefaultWorkingDirectory)/gobin'
  - name: ProjectName
    value: 'charthost'
  - name: TagName
    value: 'v$(Build.SourceBranchName)'
  - name: ProviderVersion
    value: $(Build.SourceBranchName)

resources:
  repositories:
    - repository: pipelineTemplates
      type: git
      name: pipelineTemplates

stages:
  - stage: Pre_Release
    displayName: "Tag branch"
#    condition: eq(variables['IsRelease'], 'True')
    jobs:
    - template: gitversion/gvtag.yml@pipelineTemplates
#      parameters:
#        gitVersionConfigFile: 'GitVersion.yml'

#      - job: Tag_Branch
#        displayName: "Tag branch"
#        steps:
#        - checkout: self
#          clean: ${{ parameters.clean }}
#          persistCredentials: true
#          fetchDepth: 0
#        - task: GitTag@6
#          displayName: 'Tag branch $(TagName)'
#          inputs:
#            workingdir: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)'
#            tagUser: 'ALM'
#            tagEmail: 'msbeluxisalm@engie.com'
#            tag: '$(TagName)'
#            tagMessage: 'Release $(TagName)'
#            useLightweightTags: true
#            forceTagCreation: true
#        - task: gitversion/setup@3.0.3
#          displayName: 'Install GitVersion'
#          inputs:
#            versionSpec: '6.0.0'
#        - task: gitversion/execute@3
#          displayName: 'Determine version with GitVersion'
#          inputs:
#            useConfigFile: true
#            configFilePath: 'GitVersion.yml'
#        - task: Bash@3
#          displayName: 'Tag and Push Version'
#          inputs:
#            targetType: 'inline'
#            script: |
#              echo "Tagging version $(GitVersion.FullSemVer)"
#              git tag -a $(GitVersion.FullSemVer) -m "Release version $(GitVersion.FullSemVer)"
#              git push origin $(GitVersion.FullSemVer)
#              echo "Setting VERSION to $(GitVersion.FullSemVer)"
#              echo "##vso[task.setvariable variable=VERSION]$(GitVersion.FullSemVer)"
#          env:
#            GIT_AUTHOR_NAME: 'Azure-AWS'
#            GIT_AUTHOR_EMAIL: 'mslocalfoundation.bnl@engie.com'


  - stage: Build_and_Publish
    displayName: "Build Binary"
    dependsOn: Pre_Release
#    condition: or(eq(dependencies.Pre_Release.result,'Succeeded'), eq(dependencies.Pre_Release.result,'Skipped'))
    jobs:
      - job: Build_provider
        displayName: "Build Binary"
        steps:
        - checkout: self
          clean: ${{ parameters.clean }}
          fetchTags: true
          persistCredentials: true
          fetchDepth: 0
        - task: GoTool@0
          displayName: 'Install GO v$(GoVersion)'
          inputs:
            version: '$(GoVersion)'
            goBin: '$(GoBin)'
        - task: Cache@2
          displayName: 'Cache/Restore goreleaser $(GoReleaserVersion)'
          inputs:
            key: '"$(ProjectName)" | "$(Agent.OS) | "$(GoReleaserVersion)"'
            path: '$(GoBin)'
            cacheHitVar: 'CACHE_RESTORED'
        - task: JFrogGo@1
          displayName: 'Install goreleaser $(GoReleaserVersion)'
          inputs:
            command: 'custom'
            customCommand: 'install'
            goArguments: 'github.com/goreleaser/goreleaser/v2@$(GoReleaserVersion)'
            artifactoryConnection: 'JFrog'
            resolutionRepo: 'prd-go-virtual'
          condition: ne(variables.CACHE_RESTORED, 'true')
        - task: Bash@3
          displayName: 'Prepend GOBIN to PATH'
          inputs:
            targetType: 'inline'
            script: |
              echo '##vso[task.prependpath]$(GOBIN)'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: DownloadSecureFile@1
          name: pgpprivatekey
          displayName: 'Download PGP private key'
          inputs:
            secureFile: 'PGP PRIVATE KEY BLOCK.txt'
        - task: Bash@3
          displayName: 'Import PGP key'
          inputs:
            targetType: 'inline'
            script: |
              gpg --import '$(pgpprivatekey.secureFilePath)'
        - task: JfrogCliV2@1
          displayName: Configure Artifactory for Go modules
          inputs:
            jfrogPlatformConnection: 'JFrog Platform' # Replace with your actual service connection name
            command: jf go-config --server-id-resolve="1ba894ff-0587-466f-afaa-721bbc527d28" --repo-resolve="prd-go-virtual"
        - task: Bash@3
          displayName: 'Build Go app'
          inputs:
            targetType: 'inline'
            script: |
              echo "Building with version: $(Build.BuildNumber)"
              goreleaser build --clean
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: CopyFiles@2
          inputs:
            SourceFolder: 'dist'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
            CleanTargetFolder: true
            OverWrite: true
            retryCount: '5'
        - task: JfrogCliV2@1
          displayName: Upload Artifacts to Artifactory
          inputs:
            jfrogPlatformConnection: 'JFrog Platform'
            command: jf rt u "$(Build.ArtifactStagingDirectory)/*" "prd-go-local/$(ProjectName)/$(Build.BuildNumber)/" --flat=true
        - task: JfrogCliV2@1
          displayName: Collect Build Info
          inputs:
            jfrogPlatformConnection: 'JFrog Platform'
            command: jf rt bp "$(Build.DefinitionName)" "$(Build.BuildNumber)"
        - task: JFrogPublishBuildInfo@1
          displayName: Publish Build Info to Artifactory
          inputs:
            artifactoryConnection: 'JFrog'
            buildName: '$(Build.DefinitionName)'                  # this translates to "charthost" in our case
            buildNumber: '$(Build.BuildNumber)'                   # this one is set to the same version as GitVersion saved in global variable VERSION, this is being handled automatically since version 6
            projectKey: 'prd'
         # replaced by JFrogPublishBuildInfo@1, this one below uploads to Azure DevOps artifactory
#        - task: PublishBuildArtifacts@1
#          inputs:
#            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#            ArtifactName: 'dist'
#            publishLocation: 'Container'